#include "network_module.h"
/**
 * \file network/network_module.c
 * \brief This file is used for the module communication
 * \author Morgan C.
 * \date 12/04/2013
 * \bug If the web server doesn't exist, this program will bug
 * \bug If there are to many data in socket, this program will bug
 */



/**
 * \fn int init_connection_module(const char *address,const int port)
 * \brief This function is used to initialize a communication between a module program and a server
 * \param[in] address the address of the server
 * \param[in] port the port to connect
 * \return The socket between the modele and the server
 */
int init_connection_module(const char *address,const int port)
{
   SOCKET sock = socket(AF_INET, SOCK_STREAM, 0);
   SOCKADDR_IN sin = { 0 };
   struct hostent *hostinfo;

   if(sock == INVALID_SOCKET)
   {
      perror("socket()");
      exit(errno);
   }

   hostinfo = gethostbyname(address);
   if (hostinfo == NULL)
   {
      fprintf (stderr, "Unknown host %s.\n", address);
      exit(EXIT_FAILURE);
   }

   sin.sin_addr = *(IN_ADDR *) hostinfo->h_addr;
   sin.sin_port = htons(port);
   sin.sin_family = AF_INET;

   if(connect(sock,(SOCKADDR *) &sin, sizeof(SOCKADDR)) == SOCKET_ERROR)
   {
      perror("connect()");
      exit(errno);
   }

   return sock;
}

/**
 * \fn void end_connection_module(int sock)
 * \brief This function is used to close a communication between a module program and a server
 * \param[in] sock the socket between the module and the server
 */
void end_connection_module(int sock)
{
   closesocket(sock);
}


/**
 * \fn int read_server(SOCKET sock, char *buffer)
 * \brief This function is used to read messages
 * \param[in] sock the socket between the module and the server
 * \param[out] buffer the buffer is the reading data which comes from 			      the server
 * \return number of character in the message
 */
int read_server(SOCKET sock, char *buffer)
{
   int n = 0;

   //read message
   if((n = recv(sock, buffer, BUF_SIZE - 1, 0)) < 0)
   {
      perror("recv()");
      exit(errno);
   }
   //stop reading
   buffer[n] = 0;

   return n;
}

/**
 * \fn void write_server(SOCKET sock, const char *buffer)
 * \brief This function is used to write messages
 * \param[in] sock the socket between the module and the server
 * \param[in] buffer the buffer is the data to write to the server
 * \return number of character in the message
 */
void write_server(SOCKET sock, const char *buffer)
{
   if(send(sock, buffer, strlen(buffer), 0) < 0)
   {
      perror("send()");
      exit(errno);
   }
}



